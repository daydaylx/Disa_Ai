name: CI Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

# Cancel running workflows on new push
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Gate 1: Install & Setup
  setup:
    name: Setup & Install
    runs-on: ubuntu-latest
    outputs:
      node-cache-hit: ${{ steps.node-cache.outputs.cache-hit }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - name: Cache node_modules
        id: node-cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: node-modules-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            node-modules-${{ runner.os }}-

      - name: Install dependencies
        if: steps.node-cache.outputs.cache-hit != 'true'
        run: npm ci

  # Gate 2: Secret Scanning
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for secret scanning

      - name: Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  # Gate 3: Lint
  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: [setup, secret-scan]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - name: Restore node_modules cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: node-modules-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            node-modules-${{ runner.os }}-

      - name: Install dependencies
        if: needs.setup.outputs.node-cache-hit != 'true'
        run: npm ci

      - name: Run ESLint
        run: npm run lint

  # Gate 4: Typecheck
  typecheck:
    name: Typecheck
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - name: Restore node_modules cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: node-modules-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            node-modules-${{ runner.os }}-

      - name: Install dependencies
        if: needs.setup.outputs.node-cache-hit != 'true'
        run: npm ci

      - name: Run TypeScript checks
        run: npm run typecheck

  # Gate 5: Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - name: Restore node_modules cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: node-modules-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            node-modules-${{ runner.os }}-

      - name: Install dependencies
        if: needs.setup.outputs.node-cache-hit != 'true'
        run: npm ci

      - name: Run unit tests with coverage
        run: npm run test:ci

      - name: Upload coverage reports
        if: failure() && hashFiles('coverage/**') != ''
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: coverage/
          retention-days: 3

  # Gate 6: E2E Tests (Stable only)
  e2e-tests:
    name: E2E Tests (Stable)
    runs-on: ubuntu-latest
    needs: [setup, lint, typecheck, unit-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - name: Restore node_modules cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: node-modules-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            node-modules-${{ runner.os }}-

      - name: Install dependencies
        if: needs.setup.outputs.node-cache-hit != 'true'
        run: npm ci

      - name: Install Playwright dependencies
        run: npx playwright install --with-deps chromium

      - name: Run E2E tests (excluding flaky)
        run: npx playwright test --grep-invert "@flaky"

      - name: Upload E2E artifacts on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-artifacts
          path: |
            test-results/
            playwright-report/
          retention-days: 3

  # Gate 7: Build
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [setup, lint, typecheck, unit-tests, e2e-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - name: Restore node_modules cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: node-modules-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            node-modules-${{ runner.os }}-

      - name: Install dependencies
        if: needs.setup.outputs.node-cache-hit != 'true'
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Run post-build steps
        run: npm run postbuild

      - name: Upload build artifacts
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 7

  # Gate 8: Deploy Gate (Test Only - No Actual Deploy)
  deploy-gate:
    name: Deploy Gate
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Deploy gate passed
        run: |
          echo "ðŸŽ‰ All checks passed! Ready for Cloudflare Pages deploy."
          echo "Build artifacts are available and Cloudflare will handle deployment."
          echo "No GitHub Pages deployment - Cloudflare is the single source of truth."

  # Non-gating: Flaky Tests (Optional monitoring)
  flaky-tests:
    name: Flaky Tests (Non-gating)
    runs-on: ubuntu-latest
    needs: [setup]
    continue-on-error: true
    if: github.event_name == 'pull_request' || (github.ref == 'refs/heads/main' && github.event_name == 'push')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - name: Restore node_modules cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: node-modules-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            node-modules-${{ runner.os }}-

      - name: Install dependencies
        if: needs.setup.outputs.node-cache-hit != 'true'
        run: npm ci

      - name: Install Playwright dependencies
        run: npx playwright install --with-deps chromium

      - name: Run flaky E2E tests
        run: npx playwright test --grep "@flaky"
        continue-on-error: true

      - name: Upload flaky test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: flaky-test-artifacts
          path: |
            test-results/
            playwright-report/
          retention-days: 1