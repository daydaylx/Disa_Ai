name: "Release Management"

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  release-check:
    name: "Release Version Check"
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: "Checkout Repository"
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          # Ensure we have all branches and remotes for changesets
          ref: ${{ github.head_ref || github.ref_name }}

      - name: "Fetch main branch"
        run: |
          git fetch origin main:main || echo "Main branch already available"

      - name: "Setup Node.js"
        uses: actions/setup-node@v5
        with:
          node-version: "22.19.0"
          cache: "npm"

      - name: "Install dependencies"
        run: npm ci

      - name: "Check changeset status"
        run: |
          echo "## 🔄 Release Status Check" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check if there are any changesets
          if [ -d ".changeset" ] && [ "$(find .changeset -name "*.md" -not -name "README.md" | wc -l)" -gt 0 ]; then
            echo "✅ **Changesets gefunden** - Release wird vorbereitet" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Aktive Changesets:**" >> $GITHUB_STEP_SUMMARY
            find .changeset -name "*.md" -not -name "README.md" | while read changeset; do
              filename=$(basename "$changeset")
              echo "- 📝 $filename" >> $GITHUB_STEP_SUMMARY
            done
          else
            echo "ℹ️ **Keine Changesets** - Kein Release geplant" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Hinweis:** Für einen Release verwende:" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
            echo "npm run changeset:add" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Changeset-Befehle:**" >> $GITHUB_STEP_SUMMARY
          echo "- \`npm run changeset:add\` - Changeset hinzufügen" >> $GITHUB_STEP_SUMMARY
          echo "- \`npm run changeset:status\` - Status prüfen" >> $GITHUB_STEP_SUMMARY

      - name: "Changeset status details"
        run: npm run changeset:status

  release:
    name: "Automated Release"
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: "Checkout Repository"
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          # Personal Access Token für erweiterte Berechtigungen
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: "Setup Node.js"
        uses: actions/setup-node@v5
        with:
          node-version: "22.19.0"
          cache: "npm"

      - name: "Install dependencies"
        run: npm ci

      - name: "Install Playwright browsers"
        run: npx playwright install --with-deps chromium

      - name: "Build production bundle"
        run: npm run build

      - name: "Run quality checks"
        run: npm run verify

      - name: "Create Release PR or Publish"
        id: changesets
        uses: changesets/action@v1
        with:
          # Changeset-Befehle
          version: npm run changeset:version
          publish: npm run changeset:publish
          commit: "chore(release): version packages [skip ci]"
          title: "🚀 Release: Version Bump"
          createGithubReleases: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: "Release Summary"
        if: steps.changesets.outputs.hasChangesets == 'true'
        run: |
          echo "## 🚀 Release Pipeline Executed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Actions Performed:**" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Dependencies installiert" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Production build erstellt" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Quality checks durchgeführt" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Version bumped und Release erstellt" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Published:** ${{ steps.changesets.outputs.published }}" >> $GITHUB_STEP_SUMMARY
          echo "**Published Packages:** ${{ steps.changesets.outputs.publishedPackages }}" >> $GITHUB_STEP_SUMMARY

      - name: "No Release Needed"
        if: steps.changesets.outputs.hasChangesets == 'false'
        run: |
          echo "## ℹ️ No Release Required" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** Keine Changesets vorhanden" >> $GITHUB_STEP_SUMMARY
          echo "**Action:** Kein Release erforderlich" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Für Release:** Führe \`npm run changeset:add\` aus" >> $GITHUB_STEP_SUMMARY

  create-tag:
    name: "Create Git Tag"
    runs-on: ubuntu-latest
    needs: release
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: "Checkout Repository"
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: "Setup Node.js"
        uses: actions/setup-node@v5
        with:
          node-version: "22.19.0"
          cache: "npm"

      - name: "Get package version"
        id: package-version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=v$VERSION" >> $GITHUB_OUTPUT
          echo "Current version: v$VERSION"

      - name: "Check if tag already exists"
        id: tag-check
        run: |
          if git rev-parse "${{ steps.package-version.outputs.version }}" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Tag ${{ steps.package-version.outputs.version }} already exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Tag ${{ steps.package-version.outputs.version }} does not exist"
          fi

      - name: "Create and push tag"
        if: steps.tag-check.outputs.exists == 'false'
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag -a "${{ steps.package-version.outputs.version }}" -m "Release ${{ steps.package-version.outputs.version }}"
          git push origin "${{ steps.package-version.outputs.version }}"

      - name: "Tag Summary"
        run: |
          echo "## 🏷️ Git Tag Management" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Package Version:** ${{ steps.package-version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.tag-check.outputs.exists }}" = "false" ]; then
            echo "**Action:** ✅ Tag erstellt und gepusht" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Action:** ℹ️ Tag existiert bereits" >> $GITHUB_STEP_SUMMARY
          fi
