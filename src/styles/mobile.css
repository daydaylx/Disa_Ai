/**
 * Mobile-specific styles for touch and keyboard handling
 */

/* Touch target minimum sizes */
.touch-target {
  min-width: 44px;
  min-height: 44px;
}

/* Prevent zoom on double-tap for interactive elements */
button,
[role="button"],
input,
select,
textarea,
[data-no-zoom] {
  touch-action: manipulation;
}

/* Mobile keyboard handling */
.keyboard-open {
  /* Prevent scroll bounce when keyboard is open */
  position: fixed;
  width: 100%;
  height: 100%;
  overflow: hidden;
}

/* Virtual keyboard aware spacing */
@supports (height: 100dvh) {
  .keyboard-aware {
    height: 100dvh;
  }
}

.keyboard-aware {
  min-height: calc(100vh - var(--keyboard-height, 0px));
  transition: min-height 0.2s ease-in-out;
}

/* Composer adjustments for virtual keyboard */
.keyboard-open .composer-container {
  padding-bottom: var(--keyboard-height, 0px);
  transform: translateY(calc(-1 * var(--keyboard-height, 0px) / 2));
  transition: transform 0.2s ease-in-out;
}

/* Touch feedback states */
button:active,
[role="button"]:active {
  transform: scale(0.98);
  transition: transform 0.1s ease-in-out;
}

/* Enhanced focus indicators for touch navigation */
@media (any-pointer: coarse) {
  *:focus-visible {
    outline: 2px solid var(--color-accent);
    outline-offset: 2px;
    box-shadow: 0 0 0 4px var(--color-accent-alpha);
  }
}

/* Swipe gesture indicators */
.swipe-indicator {
  position: relative;
  overflow: hidden;
}

.swipe-indicator::before {
  content: "";
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
  transition: left 0.3s ease-in-out;
}

.swipe-indicator.swiped::before {
  left: 100%;
}

/* Mobile-optimized input focus */
@media (max-width: 768px) {
  input:focus,
  textarea:focus {
    position: relative;
    z-index: 1000;
  }

  /* Smooth scroll to focused inputs */
  input:focus,
  textarea:focus {
    scroll-margin-top: 20px;
    scroll-margin-bottom: 20px;
  }
}

/* Haptic feedback visual indicators */
.haptic-success {
  animation: haptic-pulse-success 0.2s ease-in-out;
}

.haptic-warning {
  animation: haptic-pulse-warning 0.2s ease-in-out;
}

.haptic-error {
  animation: haptic-pulse-error 0.2s ease-in-out;
}

@keyframes haptic-pulse-success {
  0%,
  100% {
    transform: scale(1);
    box-shadow: 0 0 0 0 rgba(34, 197, 94, 0.7);
  }
  50% {
    transform: scale(1.05);
    box-shadow: 0 0 0 10px rgba(34, 197, 94, 0);
  }
}

@keyframes haptic-pulse-warning {
  0%,
  100% {
    transform: scale(1);
    box-shadow: 0 0 0 0 rgba(251, 191, 36, 0.7);
  }
  50% {
    transform: scale(1.05);
    box-shadow: 0 0 0 10px rgba(251, 191, 36, 0);
  }
}

@keyframes haptic-pulse-error {
  0%,
  100% {
    transform: scale(1);
    box-shadow: 0 0 0 0 rgba(239, 68, 68, 0.7);
  }
  50% {
    transform: scale(1.05);
    box-shadow: 0 0 0 10px rgba(239, 68, 68, 0);
  }
}

/* Touch-friendly scroll bars on mobile */
@media (max-width: 768px) {
  ::-webkit-scrollbar {
    width: 8px;
    height: 8px;
  }

  ::-webkit-scrollbar-track {
    background: transparent;
  }

  ::-webkit-scrollbar-thumb {
    background: rgba(255, 255, 255, 0.3);
    border-radius: 4px;
  }

  ::-webkit-scrollbar-thumb:hover {
    background: rgba(255, 255, 255, 0.5);
  }
}

/* Safe area handling for notched devices */
@supports (padding: max(0px)) {
  .safe-area-inset-top {
    padding-top: max(1rem, env(safe-area-inset-top));
  }

  .safe-area-inset-bottom {
    padding-bottom: max(1rem, env(safe-area-inset-bottom));
  }

  .safe-area-inset-left {
    padding-left: max(1rem, env(safe-area-inset-left));
  }

  .safe-area-inset-right {
    padding-right: max(1rem, env(safe-area-inset-right));
  }

  .safe-area-inset {
    padding: max(1rem, env(safe-area-inset-top)) max(1rem, env(safe-area-inset-right))
      max(1rem, env(safe-area-inset-bottom)) max(1rem, env(safe-area-inset-left));
  }
}

/* Reduce motion for users who prefer it */
@media (prefers-reduced-motion: reduce) {
  .haptic-success,
  .haptic-warning,
  .haptic-error {
    animation: none;
  }

  button:active,
  [role="button"]:active {
    transform: none;
  }

  .keyboard-open .composer-container {
    transition: none;
  }
}
