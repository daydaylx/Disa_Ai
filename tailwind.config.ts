/* eslint-disable */
import type { Config } from "tailwindcss";
import { designTokens } from "./src/styles/design-tokens";

export default {
  content: ["./index.html", "./src/**/*.{ts,tsx}"],
  darkMode: ["class"],
  theme: {
    extend: {
      colors: {
        canvas: "var(--bg0)",
        layer1: "var(--bg1)",
        layer2: "var(--bg2)",
        "surface-0": "var(--surface-0)",
        "surface-1": "var(--surface-1)",
        "surface-2": "var(--surface-2)",
        primary: "var(--fg)",
        secondary: "var(--fg-dim)",
        subtle: "var(--fg-subtle)",
        text: {
          strong: "var(--text-strong)",
          primary: "var(--text-primary)",
          muted: "var(--text-muted)",
          subtle: "var(--text-subtle)",
          0: "var(--text-0)",
          1: "var(--text-1)",
          2: "var(--text-2)",
        },
        brand: "rgb(var(--brand-rgb) / <alpha-value>)",
        "brand-weak": "rgba(var(--brand-rgb), 0.22)",
        "brand-strong": "rgba(var(--brand-rgb), 0.92)",
        "brand-contrast": "var(--brand-contrast)",
        accent1: "var(--acc1)",
        accent2: "var(--acc2)",
        border: "rgb(var(--border-rgb) / <alpha-value>)",
        "border-subtle": "rgb(var(--border-subtle-rgb) / <alpha-value>)",
        "border-strong": "rgb(var(--border-strong-rgb) / <alpha-value>)",
        "border-focus": "var(--border-focus)",
        success: "rgb(var(--success-rgb) / <alpha-value>)",
        "success-bg": "var(--success-bg)",
        warning: "rgb(var(--warning-rgb) / <alpha-value>)",
        "warning-bg": "var(--warning-bg)",
        danger: "rgb(var(--danger-rgb) / <alpha-value>)",
        "danger-bg": "var(--danger-bg)",
        "hover-bg": "var(--hover-bg)",
        "hover-bg-strong": "var(--hover-bg-strong)",
        "active-bg": "var(--active-bg)",
      },
      spacing: {
        0: "var(--space-0)",
        1: "var(--space-1)",
        2: "var(--space-2)",
        3: "var(--space-3)",
        4: "var(--space-4)",
        5: "var(--space-5)",
        6: "var(--space-6)",
        8: "var(--space-8)",
        10: "var(--space-10)",
        12: "var(--space-12)",
        // Semantische Spacing-Tokens
        xs: "var(--spacing-xs)",
        sm: "var(--spacing-sm)",
        md: "var(--spacing-md)",
        lg: "var(--spacing-lg)",
        xl: "var(--spacing-xl)",
        "2xl": "var(--spacing-2xl)",
        "3xl": "var(--spacing-3xl)",
        // Spezifische Anwendungsf√§lle
        "section-gap": "var(--section-gap)",
        "stack-gap": "var(--stack-gap)",
        "inline-gap": "var(--inline-gap)",
        "component-gap": "var(--component-gap)",
        "page-y": "var(--page-padding-y)",
        "page-x": "var(--page-padding-x)",
        // Touch targets
        "touch-min": "var(--touch-minimum)",
        "touch-rec": "var(--touch-recommended)",
        "touch-com": "var(--touch-comfortable)",
        "touch-lg": "var(--touch-large)",
      },
      borderRadius: {
        none: "0px",
        sm: "var(--radius-sm)",
        base: "var(--radius-base)",
        lg: "var(--radius-lg)",
        xl: "var(--radius-xl)",
        full: "var(--radius-full)",
        pill: "var(--radius-pill)",
      },
      boxShadow: {
        level: "var(--elev-1)",
        level2: "var(--elev-2)",
        level3: "var(--elev-3)",
        neon: "var(--neon)",
        "neon-strong": "var(--neon-strong)",
      },
      backdropBlur: {
        sm: "var(--glass-blur-sm)" /* Added glass blur sm */,
        md: "var(--glass-blur-md)" /* Added glass blur md */,
        lg: "var(--glass-blur-lg)" /* Added glass blur lg */,
      },
      transitionDuration: {
        fast: "var(--transition-fast)",
        normal: "var(--transition-normal)",
        slow: "var(--transition-slow)",
      },
      transitionTimingFunction: {
        spring: "var(--transition-spring)",
        smooth: "var(--transition-smooth)",
      },
      height: {
        "screen-dynamic": "var(--vh, 100dvh)",
        "screen-small": "100svh",
        "screen-large": "100lvh",
      },
      minHeight: {
        "screen-dynamic": "var(--vh, 100dvh)",
        "screen-small": "100svh",
        "screen-large": "100lvh",
      },
      fontFamily: {
        mono: ["var(--font-mono)"],
      },
      fontSize: {
        "token-display": designTokens.typography.display.fontSize,
        "token-h1": designTokens.typography.h1.fontSize,
        "token-h2": designTokens.typography.h2.fontSize,
        "token-h3": designTokens.typography.h3.fontSize,
        "token-body": designTokens.typography.body.fontSize,
        "token-hint": designTokens.typography.hint.fontSize,
        "token-caption": designTokens.typography.caption.fontSize,
        "token-mono": designTokens.typography.mono.fontSize,
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.18s ease-out",
        "accordion-up": "accordion-up 0.18s ease-out",
      },
      padding: {
        "safe-top": "env(safe-area-inset-top)",
        "safe-bottom": "env(safe-area-inset-bottom)",
        "safe-left": "env(safe-area-inset-left)",
        "safe-right": "env(safe-area-inset-right)",
      },
      margin: {
        "safe-top": "env(safe-area-inset-top)",
        "safe-bottom": "env(safe-area-inset-bottom)",
        "safe-left": "env(safe-area-inset-left)",
        "safe-right": "env(safe-area-inset-right)",
      },
    },
  },
  safelist: [
    "pb-safe-bottom",
    "pt-safe-top",
    "glass" /* Added glass class */,
    "glass--subtle" /* Added glass subtle class */,
    "glass--strong" /* Added glass strong class */,
    {
      pattern: /(grid|flex|gap|items|justify)-(.*)/,
    },
  ],
  plugins: [],
} satisfies Config;
